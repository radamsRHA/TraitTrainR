numeric.n <- 10
MyData <- matrix(nrow = 23, ncol = 11)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, -10, 10, -100)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 23)
}
MyData
Y <- cbind(50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Y
Y <- cbind(50, 0, 0, -3, 0, 0, 7, 0, -2, 8, 8)
Y
BETA %*% MyData[,2:11]
BETA <- cbind(50, 0, 0, -3, 0, 0, 7, 0, -2, 8, 8)
BETA %*% MyData[,2:11]
MyData[,2:11] %*% BETA
BETA
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, 0, -2, 8, 8))
BETA
MyData[,2:11] %*% BETA
BETA %*% MyData[,2:11]
BETA
BETA %*% cbind(1, MyData[,2:11])
cbind(1, MyData[,2:11]) %*% BETA
vector.Y <- cbind(1, MyData[,2:11]) %*% BETA
vector.Y
MyData[,1] <- vector.Y
MyData
colnames(MyData) <- c("BloodCount", paste0(c("Protein_")))
paste0(c("Protein_")
)
colnames(MyData) <- c("BloodCount", paste0(c("Protein_", 1:10)))
paste0(c("Protein_", 1:10))
paste0("Protein_", 1:10)
colnames(MyData) <- c("BloodCount", paste0("Protein_", 1:10))
MyData
MyData <- as.data.frame(MyData)
MyData
lm(BloodCount ~., MyData)
summary(lm(BloodCount ~., MyData))
numeric.n <- 10
MyData <- matrix(nrow = 23, ncol = 11)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, -10, 10, -100)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 23)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, 0, -2, 8, 8))
MyData[,2:11] %*% BETA
numeric.n <- 10
MyData <- matrix(nrow = 23, ncol = 11)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, -10, 10, -100)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 23)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, 0, -2, 8, 8))
MyData[,2:11] %*% BETA
numeric.n <- 10
MyData <- matrix(nrow = 23, ncol = 11)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, -10, 10, -100)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 23)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, 0, -2, 8, 8))
vector.Y <- cbind(1, MyData[,2:11]) %*% BETA
MyData[,1] <- vector.Y + rnorm(23)
colnames(MyData) <- c("BloodCount", paste0("Protein_", 1:10))
MyData <- as.data.frame(MyData)
summary(lm(BloodCount ~., MyData))
write.csv(x = MyData, file = '~/Desktop/BloodCount_ProteinData.csv', quote = F, row.names = F)
GeneCount <- as.matrix(data.frame(Deer1 = rnorm(20), Deer2 = rnorm(20), Deer3 = rnorm(20), Deer4 = rnorm(20),X5 = rnorm(20)))
GeneCount <- as.matrix(data.frame(Steer1 = rnorm(32), Steer2 = rnorm(32), Steer3 = rnorm(32), Steer4 = rnorm(32),Steer5 = rnorm(32)))
GeneCount
GeneCount <- as.matrix(data.frame(Steer1 = rnorm(32), Steer2 = rnorm(32), Steer3 = rnorm(32), Steer4 = rnorm(32),Steer5 = rnorm(32)))
BodyIndex <- GeneCount %*% cbind(c(0, 0, -1, 0, 1)) + rnorm(32)
GeneCount <- as.matrix(data.frame(Steer1 = rnorm(32), Steer2 = rnorm(32), Steer3 = rnorm(32), Steer4 = rnorm(32),Steer5 = rnorm(32)))
BodyIndex <- GeneCount %*% cbind(c(0, 0, -1, 0, 1)) + rnorm(32)
MyData <- data.frame(YIELD = BodyIndex, GeneCount)
MyData
GeneCount <- as.matrix(data.frame(Steer1 = rnorm(32), Steer2 = rnorm(32), Steer3 = rnorm(32), Steer4 = rnorm(32),Steer5 = rnorm(32)))
BodyIndex <- GeneCount %*% cbind(c(0, 0, -1, 0, 1)) + rnorm(32)
MyData <- data.frame(BodyIndex, GeneCount)
MyData
MODEL <- lm(BodyIndex ~ ., MyData)
MODEL
ggcoef(tail(broom::tidy(MODEL, conf.int = T), 10), sort = "ascending")
GGally::ggcoef(tail(broom::tidy(MODEL, conf.int = T), 10), sort = "ascending")
numeric.n <- 7
MyData <- matrix(nrow = 23, ncol = 8)
MEAN <- c(0, 1, 20, 3, 50, 10, -10)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 23)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7))
vector.Y <- cbind(1, MyData[,2:11]) %*% BETA
MyData[,1] <- vector.Y + rnorm(23)
numeric.n <- 7
MyData <- matrix(nrow = 47, ncol = 8)
MEAN <- c(0, 1, 20, 3, 50, 10, -10)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7))
vector.Y <- cbind(1, MyData[,2:11]) %*% BETA
numeric.n <- 7
MyData <- matrix(nrow = 47, ncol = 8)
MEAN <- c(0, 1, 20, 3, 50, 10, -10)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7))
vector.Y <- cbind(1, MyData[,2:8]) %*% BETA
numeric.n <- 7
MyData <- matrix(nrow = 47, ncol = 8)
MEAN <- c(0, 1, 20, 3, 50, 10, -10)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, -2))
vector.Y <- cbind(1, MyData[,2:8]) %*% BETA
MyData[,1] <- vector.Y + rnorm(47)
MyData
numeric.n <- 14
MyData <- matrix(nrow = 47, ncol = 15)
MEAN <- c(0, 1, 20, 3, 50, 10, -10)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
MyData[,(i+1)]
MyData
numeric.n <- 14
MyData <- matrix(nrow = 47, ncol = 15)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, 0, 0, 0, 3, -11, 14, 0, -19, 2)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
MyData
numeric.n <- 14
MyData <- matrix(nrow = 47, ncol = 15)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, 0, 0, 0, 3, -11, 14, 0, -19, 2)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, -2, 0, 0, -3, 0, 0, 7, -2))
vector.Y <- cbind(1, MyData[,2:8]) %*% BETA
BETA
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, -2, 0, 0, -3, 0, 0, 7, -2))
BETA
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, -2, 0, 0, -3, 0, 0, -2))
BETA
numeric.n <- 14
MyData <- matrix(nrow = 47, ncol = 15)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, 0, 0, 0, 3, -11, 14, 0, -19, 2)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, -2, 0, 0, -3, 0, 0, 7, -2))
vector.Y <- cbind(1, MyData[,2:15]) %*% BETA
MyData[,1] <- vector.Y + rnorm(47)
MyData
numeric.n <- 14
MyData <- matrix(nrow = 47, ncol = 15)
MEAN <- c(0, 1, 20, 3, 50, 10, -10, 0, 0, 0, 3, -11, 14, 0, -19, 2)
for (i in 1:numeric.n){
MyData[,(i+1)] <- MEAN[i] + rnorm(n = 47)
}
BETA <- cbind(c(50, 0, 0, -3, 0, 0, 7, -2, 0, 0, -3, 0, 0, 7, -2))
vector.Y <- cbind(1, MyData[,2:15]) %*% BETA
MyData[,1] <- vector.Y + rnorm(47)
colnames(MyData) <- c("InsectIndex", paste0("LeafFeature_", 1:14))
MyData <- as.data.frame(MyData)
MyData
write.csv(x = MyData, file = '~/Desktop/InsectLeafData.csv', col.names = F)
write.csv(x = MyData, file = '~/Desktop/InsectLeafData.csv', row.names = F, quote = F)
handle.D <- read.csv(file = '~/Desktop/DATA_Advertising.csv')
handle.D
handle.D <- handle.D + rnorm(n = length(handle.D))
handle.D
write.csv(x = handle.D, file = '~/Desktop/RiceYieldData_March23.csv', row.names = F, quote = F)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MyData
MODEL_FULL <- lm(YIELD ~., MyData)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MODEL_FULL <- lm(YIELD ~., MyData)
MODEL_FERT <- lm(YIELD ~FERT, MyData)
MODEL_FERT <- lm(YIELD ~PEST, MyData)
MODEL_SOIL_A <- lm(YIELD ~SOIL_A, MyData)
summary(MODEL_FULL)
summary(MODEL_FERT)
MODEL_PEST <- lm(YIELD ~PEST, MyData)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MODEL_FULL <- lm(YIELD ~., MyData)
MODEL_FERT <- lm(YIELD ~FERT, MyData)
MODEL_PEST <- lm(YIELD ~PEST, MyData)
MODEL_SOIL <- lm(YIELD ~SOIL_A, MyData)
summary(MODEL_FULL)
summary(MODEL_FERT)
summary(MODEL_PEST)
summary(MODEL_PEST)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MODEL_FULL <- lm(YIELD ~., MyData)
MODEL_FERT <- lm(YIELD ~FERT, MyData)
MODEL_PEST <- lm(YIELD ~PEST, MyData)
MODEL_SOIL <- lm(YIELD ~SOIL_A, MyData)
summary(MODEL_FULL)
summary(MODEL_FERT)
summary(MODEL_PEST)
summary(MODEL_SOIL)
MODEL_FULL
summary(MODEL_FULL)
summary(MODEL_FERT)
summary(MODEL_PEST)
summary(MODEL_SOIL)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MODEL_FULL <- lm(YIELD ~. ., MyData)
MODEL_FULL <- lm(YIELD ~., MyData)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MODEL_FULL <- lm(YIELD ~., MyData)
MODEL_FERT <- lm(YIELD ~ FERT, MyData)
MODEL_PEST <- lm(YIELD ~ PEST, MyData)
MODEL_SOIL <- lm(YIELD ~ SOIL_A, MyData)
MODEL_FULL
summary(MODEL_FULL)
summary(MODEL_PEST)
MODEL_SOIL
summary(MODEL_SOIL)
MODEL_SOIL
MODEL_FERT
summary(MODEL_FULL)
summary(MODEL_PEST)
summary(MODEL_FERT)
MyData <- read.csv(file = '~/Desktop/InsectLeafData.csv')
MyData
MyData <- read.csv(file = '~/Desktop/InsectLeafData.csv')
MyData
MyData <- read.csv(file = '~/Desktop/InsectLeafData.csv')
MyData
MyData <- round(MyData, 3)
MyData
write.csv(x = MyData, file = '~/Desktop/Insect_Leaf_Data_13Feb21.csv', quote = F, row.names = F)
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb21.csv')
MyData <- round(MyData, 2)
write.csv(x = MyData, file = '~/Desktop/Insect_Leaf_Data_13Feb21.csv', quote = F, row.names = F)
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
MyData
MyData
summary(lm(InsectIndex ~ LeafFeature_1))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_1, MyData))
summary(lm(InsectIndex ~ LeafFeature_2, MyData))
summary(lm(InsectIndex ~ LeafFeature_3, MyData))
summary(lm(InsectIndex ~ LeafFeature_4, MyData))
summary(lm(InsectIndex ~ LeafFeature_5, MyData))
summary(lm(InsectIndex ~ LeafFeature_6, MyData))
summary(lm(InsectIndex ~ LeafFeature_7, MyData))
summary(lm(InsectIndex ~ LeafFeature_8, MyData))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_9, MyData))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_10, MyData))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_11, MyData))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_12, MyData))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_13, MyData))
MyData <- read.csv(file = '~/Desktop/Insect_Leaf_Data_13Feb2019.csv')
summary(lm(InsectIndex ~ LeafFeature_14, MyData))
GeneCount <- as.matrix(data.frame(Steer1 = rnorm(32), Steer2 = rnorm(32), Steer3 = rnorm(32), Steer4 = rnorm(32),Steer5 = rnorm(32)))
BodyIndex <- GeneCount %*% cbind(c(0, 0, -1, 0, 1)) + rnorm(32)
MyData <- data.frame(BodyIndex, GeneCount)
MyData
MyData <- read.csv(file = '~/Desktop/BloodCount_ProteinData.csv')
MyData
MODEL <- lm(BloodCount ~ ., MyData)
MODEL
summary(MODEL)
################
# load depends #
################
library(dplyr)
#############
# read data #
#############
DAT_Gg_21 <- read.table(file = '~/Desktop/TRY/hic_gorGor4/chr21.50K.txt')
DAT_Gg_22 <- read.table(file = '~/Desktop/TRY/hic_gorGor4/chr21.50K.txt')
DAT_Hs_21 <- read.table(file = '~/Desktop/TRY/hic_hg38/chr21.50K.txt')
DAT_Hs_22 <- read.table(file = '~/Desktop/TRY/hic_hg38/chr21.50K.txt')
DAT_Pp_21 <- read.table(file = '~/Desktop/TRY/hic_panPan2//chr21.50K.txt')
DAT_Pp_22 <- read.table(file = '~/Desktop/TRY/hic_panPan2//chr21.50K.txt')
DAT_Pt_21 <- read.table(file = '~/Desktop/TRY/hic_panTro5/chr21.50K.txt')
DAT_Pt_22 <- read.table(file = '~/Desktop/TRY/hic_panTro5/chr21.50K.txt')
#################
# check overlap #
#################
DAT_Gg_21 <- cbind(DAT_Gg_21, "Gg", "21")
DAT_Gg_22 <- cbind(DAT_Gg_22, "Gg", "22")
DAT_Hs_21 <- cbind(DAT_Hs_21, "Hs", "21")
DAT_Hs_22 <- cbind(DAT_Hs_22, "Hs", "22")
DAT_Pp_21 <- cbind(DAT_Pp_21, "Pp", "21")
DAT_Pp_22 <- cbind(DAT_Pp_22, "Pp", "22")
DAT_Pt_21 <- cbind(DAT_Pt_21, "Pt", "21")
DAT_Pt_22 <- cbind(DAT_Pt_22, "Pt", "22")
colnames(DAT_Gg_21) <- colnames(DAT_Gg_22) <- colnames(DAT_Hs_21) <- colnames(DAT_Hs_22) <- colnames(DAT_Pp_21) <- colnames(DAT_Pp_22) <- colnames(DAT_Pt_21) <- colnames(DAT_Pt_22) <- c("Loc1", "Loc2", "score", "species", "chrom")
###############
# alltogether #
###############
handle.DATA <- rbind(DAT_Gg_21, DAT_Gg_22, DAT_Hs_21, DAT_Hs_22, DAT_Pp_21, DAT_Pp_22, DAT_Pt_21, DAT_Pt_22)
colnames(handle.DATA)
###################
# Filter to Chr21 #
###################
handle.CHROM_21 <- handle.DATA %>% filter(chrom == 21)
############################
# FILTER TO GOOD 4 species #
############################
handle.CHROM_21 <- handle.CHROM_21 %>% mutate(COORD = paste0(Loc1, "_", Loc2))
vector.GOOD_COORD <- names(table(handle.CHROM_21$COORD)[table(handle.CHROM_21$COORD)==4])
handle.GOOD_21 <- handle.CHROM_21 %>% filter(COORD %in% vector.GOOD_COORD)
############################
# LOOP THROUGH GOOD COORDS #
############################
for (i in 1:length(vector.GOOD_COORD)){
string.GOOD_COORD <- vector.GOOD_COORD[i]
handle.GOOD_COORD_4Species <- handle.GOOD_21 %>% filter(COORD == string.GOOD_COORD)
}
GeneCount <- as.matrix(data.frame(Steer1 = rnorm(32), Steer2 = rnorm(32), Steer3 = rnorm(32), Steer4 = rnorm(32),Steer5 = rnorm(32)))
BodyIndex <- GeneCount %*% cbind(c(0, 0, -1, 0, 1)) + rnorm(32)
MyData <- data.frame(BodyIndex, GeneCount)
lm(MyData)
summary(lm(MyData))
MyData
summary(lm(MyData[,2:5]))
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MyData
MODEL_FULL <-lm(YIELD ~ ., MyData)
MyData <- read.csv(file = '~/Desktop/RiceYieldData_March23.csv')
MODEL_FULL <-lm(YIELD ~ ., MyData)
MODEL_FERT <-lm(YIELD ~ FERT, MyData)
MODEL_PEST <-lm(YIELD ~ PEST, MyData)
MODEL_SOIL <-lm(YIELD ~ SOIL_A, MyData)
summary(MODEL_FULL)
summary(MODEL_SOIL)
summary(MODEL_FERT)
summary(MODEL_FULL)
summary(MODEL_FULL)
summary(MODEL_SOIL)
summary(MODEL_FERT)
################
# Load depends #
################
library("devtools"); library(roxygen2)
#############
# Reinstall #
#############
rm(list = ls()); setwd("~/OneDrive/ARCHIVE/_Software/"); uninstall("TraitTrainR/"); setwd("./TraitTrainR/"); document(); setwd("~/OneDrive/ARCHIVE/_Software/"); install("TraitTrainR")
#####################
# load dependencies #
#####################
library(geiger); library(phytools); library(TraitTrainR)
#########################
# get example phylogeny #
#########################
handle.PrimatePhylogeny <- read.tree(text = "((((((((human: 6, chimp:6): 1, gorilla: 7): 7, orangutan: 14): 11, macaque: 25): 64, mouse: 89): 91, opossum: 180): 20, platypus: 200): 110, chicken: 310);")
#############################
# Simulation Model Settings #
#############################
list.SimulationModelSettings <- list() # define an empty model list
##########################
# SET SIMULATION MODEL 1 #
##########################
numeric.NumberTrainingReps <- 2 # same number of replicates for all models in list.SimulationModelSettings
list.Rmatrix <- list(); for (i in 1:numeric.NumberTrainingReps){list.Rmatrix[[i]] <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3)} # three traits. Different rates for different traits can be specified here.
#list.Rmatrix <- list(); for (i in 1:numeric.NumberTrainingReps){list.Rmatrix[[i]] <- matrix(1, nrow = 1, ncol = 1)} # three traits. Different rates for different traits can be specified here.
######################
# First model is BM  #
######################
list.SimulationModelSettings[[1]] <- list(string.SimulationModel = "BM",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
list.Rmatrix = list.Rmatrix)
#######################
# Second model is OU  #
#######################
list.SimulationModelSettings[[2]] <- list(string.SimulationModel = "OU",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
vector.Alpha = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = exp(1)),
list.Rmatrix = list.Rmatrix)
######################
# third model is EB  #
######################
list.SimulationModelSettings[[3]] <- list(string.SimulationModel = "EB",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
vector.A = runif(n = numeric.NumberTrainingReps, min = log(10^-5)/310, max = -0.000001),
list.Rmatrix = list.Rmatrix)
##########################
# fourth model is kappa  #
##########################
list.SimulationModelSettings[[4]] <- list(string.SimulationModel = "kappa",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
vector.kappa = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = 1),
list.Rmatrix = list.Rmatrix)
##########################
# fifth model is lambda  #
##########################
list.SimulationModelSettings[[5]] <- list(string.SimulationModel = "lambda",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
vector.lambda = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = 1),
list.Rmatrix = list.Rmatrix)
#######################
# six model is delta  #
#######################
list.SimulationModelSettings[[6]] <- list(string.SimulationModel = "delta",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
vector.delta = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = 3),
list.Rmatrix = list.Rmatrix)
###########################
# seventh model is trend  #
###########################
list.SimulationModelSettings[[7]] <- list(string.SimulationModel = "trend",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
vector.slope = rexp(n = numeric.NumberTrainingReps, rate = 1),
list.Rmatrix = list.Rmatrix)
#########################
# eight model is white  #
#########################
list.SimulationModelSettings[[8]] <- list(string.SimulationModel = "white",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
list.Rmatrix = list.Rmatrix)
##########################
# nineth model is depth  #
##########################
list.SimulationModelSettings[[9]] <- list(string.SimulationModel = "depth",
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
list.Rmatrix = list.Rmatrix,
vector.depth = runif(n = numeric.NumberTrainingReps, min = 0, max = 10))
##########################
# tenth model is lrate  #
##########################
list.SimulationModelSettings[[10]] <- list(string.SimulationModel = "lrate",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
list.Rmatrix = list.Rmatrix,
matrix.lrate_node = matrix(replicate(n = numeric.NumberTrainingReps, runif(n = 1, min = 0, max = 1)), nrow = T),
matrix.lrate_rate = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T))
############################
# eleventh model is nrate  #
############################
list.SimulationModelSettings[[11]] <- list(string.SimulationModel = "nrate",
vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1),
vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100),
matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T),
matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T),
matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)),
matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)),
list.Rmatrix = list.Rmatrix,
matrix.nrate_time = matrix(replicate(n = numeric.NumberTrainingReps, runif(n = 1, min = 0, max = 1)), nrow = T),
matrix.nrate_rate = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T))
####################
# SIMULATE TRAITS! #
####################
handle.RESULTS_TEST <- TraitTrain(handle.Phylogeny = handle.PrimatePhylogeny,
list.SimulationModelSettings = list.SimulationModelSettings,
logical.PIC = T, logical.PROJECT = T, numeric.MeasurementError = 1)
getwd()
setwd('TraitTrainR/')
devtools::build_manual()
