% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TraitTrain.R
\name{TraitTrain}
\alias{TraitTrain}
\title{TraitTrain: Function to conduct large-scale, flexible simulations of trait data given a particular tree.}
\usage{
TraitTrain(
  handle.Phylogeny,
  list.SimulationModelSettings,
  numeric.MeasurementError = 0,
  logical.PIC = F,
  logical.PROJECT = F
)
}
\arguments{
\item{handle.Phylogeny}{Phylogeny used to simulate traits with TrainTrainR}

\item{list.SimulationModelSettings}{List containing the model values and parameters to be used during simulation. Must contain (at least) the following for each entry in the list: string.SimulationModel (string defines the model; must be one of c("BM", "OU", "EB", "nrate", "lrate", "trend", "lambda", "kappa", "delta", "white", "depth")); vector.Sig2 (value of the evolutionary rate parameter for each replicate); vector.AncestralState (value of the ancestral state for each replicate)}

\item{numeric.MeasurementError}{Numerical value representing the variance of the sample error (assumed Normally distributed with mean = 0 , sd = sqrt(numeric.MeasurementError))}

\item{logical.PIC}{True/False logical indicating whether to compute PICs (or not).}

\item{logical.PROJECT}{True/False logical indicating whether to compute phylogenetic projections (or not)}
}
\value{
LIST A list of data.frames that include: RESULTS_TRAIT (raw trait values across simulations); RESULTS_PIC (compute PICS across simulations); RESULTS_PIC_DEPTH (computed PICS across simulation using target tree scaled to depth); RESULTS_PROJECT (projected trait using input tree); RESULTS_PROJECT_DEPTH (projected traits using input tree scaled to unit depth = 1)
}
\description{
This function returns a list of data.frames that include: RESULTS_TRAIT (raw trait values across simulations); RESULTS_PIC (compute PICS across simulations); RESULTS_PIC_DEPTH (computed PICS across simulation using target tree scaled to depth); RESULTS_PROJECT (projected trait using input tree); RESULTS_PROJECT_DEPTH (projected traits using input tree scaled to unit depth = 1)
}
\examples{
#####################
# load dependencies #
#####################
library(geiger); library(phytools); library(TraitTrainR)

#########################
# get example phylogeny #
#########################
handle.PrimatePhylogeny <- read.tree(text = "((((((((human: 6, chimp:6): 1, gorilla: 7): 7, orangutan: 14): 11, macaque: 25): 64, mouse: 89): 91, opossum: 180): 20, platypus: 200): 110, chicken: 310);")

#############################
# Simulation Model Settings #
#############################
list.SimulationModelSettings <- list() # define an empty model list

##########################
# SET SIMULATION MODEL 1 #
##########################
numeric.NumberTrainingReps <- 2 # same number of replicates for all models in list.SimulationModelSettings
list.Rmatrix <- list(); for (i in 1:numeric.NumberTrainingReps){list.Rmatrix[[i]] <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, ncol = 3)} # three traits. Different rates for different traits can be specified here. 
#list.Rmatrix <- list(); for (i in 1:numeric.NumberTrainingReps){list.Rmatrix[[i]] <- matrix(1, nrow = 1, ncol = 1)} # three traits. Different rates for different traits can be specified here. 

######################
# First model is BM  #
######################
list.SimulationModelSettings[[1]] <- list(string.SimulationModel = "BM", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          list.Rmatrix = list.Rmatrix)

#######################
# Second model is OU  #
#######################
list.SimulationModelSettings[[2]] <- list(string.SimulationModel = "OU", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          vector.Alpha = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = exp(1)),
                                          list.Rmatrix = list.Rmatrix)


######################
# third model is EB  #
######################
list.SimulationModelSettings[[3]] <- list(string.SimulationModel = "EB", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          vector.A = runif(n = numeric.NumberTrainingReps, min = log(10^-5)/310, max = -0.000001),
                                          list.Rmatrix = list.Rmatrix)

##########################
# fourth model is kappa  #
##########################
list.SimulationModelSettings[[4]] <- list(string.SimulationModel = "kappa", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          vector.kappa = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = 1), 
                                          list.Rmatrix = list.Rmatrix)
##########################
# fifth model is lambda  #
##########################
list.SimulationModelSettings[[5]] <- list(string.SimulationModel = "lambda", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          vector.lambda = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = 1), 
                                          list.Rmatrix = list.Rmatrix)

#######################
# six model is delta  #
#######################
list.SimulationModelSettings[[6]] <- list(string.SimulationModel = "delta", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          vector.delta = runif(n = numeric.NumberTrainingReps, min = exp(-500), max = 3), 
                                          list.Rmatrix = list.Rmatrix)


###########################
# seventh model is trend  #
###########################
list.SimulationModelSettings[[7]] <- list(string.SimulationModel = "trend", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          vector.slope = rexp(n = numeric.NumberTrainingReps, rate = 1),
                                          list.Rmatrix = list.Rmatrix)
#########################
# eight model is white  #
#########################
list.SimulationModelSettings[[8]] <- list(string.SimulationModel = "white", 
                                          vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          list.Rmatrix = list.Rmatrix)


##########################
# nineth model is depth  #
##########################
list.SimulationModelSettings[[9]] <- list(string.SimulationModel = "depth", 
                                          vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                          matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                          matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                          matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                          matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                          list.Rmatrix = list.Rmatrix, 
                                          vector.depth = runif(n = numeric.NumberTrainingReps, min = 0, max = 10))

##########################
# tenth model is lrate  #
##########################
list.SimulationModelSettings[[10]] <- list(string.SimulationModel = "lrate", 
                                           vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                           vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                           matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                           matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                           matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                           matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                           list.Rmatrix = list.Rmatrix, 
                                           matrix.lrate_node = matrix(replicate(n = numeric.NumberTrainingReps, runif(n = 1, min = 0, max = 1)), nrow = T),
                                           matrix.lrate_rate = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T))

############################
# eleventh model is nrate  #
############################
list.SimulationModelSettings[[11]] <- list(string.SimulationModel = "nrate", 
                                           vector.Sig2 = rexp(n = numeric.NumberTrainingReps, rate = 1), 
                                           vector.AncestralState = runif(n = numeric.NumberTrainingReps, min = 0, max = 100), 
                                           matrix.STACK_lrate_nodes = matrix(replicate(n = numeric.NumberTrainingReps, sample(size = 1, x = 1:16, replace = F)), nrow = T), 
                                           matrix.STACK_lrate_rates = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T), 
                                           matrix.STACK_AncShiftNode = replicate(n = numeric.NumberTrainingReps, sample(size = 2, x = 1:16, replace = F)), 
                                           matrix.STACK_AncShiftValue = replicate(n = numeric.NumberTrainingReps , rnorm(n = 2, mean = 10000)), 
                                           list.Rmatrix = list.Rmatrix, 
                                           matrix.nrate_time = matrix(replicate(n = numeric.NumberTrainingReps, runif(n = 1, min = 0, max = 1)), nrow = T),
                                           matrix.nrate_rate = matrix(replicate(n = numeric.NumberTrainingReps , runif(n = 1, min = 0, max = 100)), nrow = T))

####################
# SIMULATE TRAITS! #
####################
handle.RESULTS_TEST <- TraitTrain(handle.Phylogeny = handle.PrimatePhylogeny, 
                                        list.SimulationModelSettings = list.SimulationModelSettings, 
                                        logical.PIC = T, logical.PROJECT = T)

}
